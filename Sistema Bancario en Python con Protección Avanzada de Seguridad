"""
Sistema Bancario Seguro con Hashing, Bloqueo, Control de Sesiones y Validación Segura.
Autor: Lucas Rapiman
Repositorio: https://github.com/Luk1313/Lu
"""

import hashlib
import time
import random
import string

class SistemaBancario:
    def __init__(self):
        self.cuentas = {}
        self.intentos_fallidos = {}
        self.sesiones_activas = {}

    # --- SEGURIDAD Y GESTIÓN DE CONTRASEÑAS ---

    def generar_salt(self, length=16):
        return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

    def hashear_contraseña(self, contraseña, salt):
        return hashlib.sha256((contraseña + salt).encode()).hexdigest()

    def es_contraseña_segura(self, contraseña):
        assert contraseña, "La contraseña no debe estar vacía."
        return (
            any(c.isupper() for c in contraseña) and
            any(c.islower() for c in contraseña) and
            any(c.isdigit() for c in contraseña)
        )

    # --- BLOQUEO DE CUENTAS ---

    def bloquear_cuenta(self, numero_cuenta, tiempo_bloqueo=30):
        self.intentos_fallidos[numero_cuenta] = time.time() + tiempo_bloqueo
        print(f"\n[!] Cuenta {numero_cuenta} bloqueada temporalmente por seguridad.")

    def verificar_bloqueo(self, numero_cuenta):
        if numero_cuenta in self.intentos_fallidos:
            if time.time() < self.intentos_fallidos[numero_cuenta]:
                print("\n[!] Cuenta bloqueada. Intenta nuevamente más tarde.")
                return True
            del self.intentos_fallidos[numero_cuenta]
        return False

    # --- MODELO DE CUENTA ---

    class Cuenta:
        def __init__(self, numero_cuenta, titular, saldo_inicial, tipo_cuenta, contraseña_hash, salt):
            assert saldo_inicial >= 0, "El saldo inicial no puede ser negativo."
            self.numero_cuenta = numero_cuenta
            self.titular = titular
            self.saldo = saldo_inicial
            self.tipo_cuenta = tipo_cuenta
            self.contraseña_hash = contraseña_hash
            self.salt = salt

        def depositar(self, cantidad):
            assert cantidad > 0, "El depósito debe ser mayor que 0."
            self.saldo += cantidad
            print(f"\n[+] Depósito exitoso: ${cantidad:.2f}. Nuevo saldo: ${self.saldo:.2f}")

        def retirar(self, cantidad):
            assert cantidad > 0, "El retiro debe ser mayor que 0."
            if cantidad <= self.saldo:
                self.saldo -= cantidad
                print(f"\n[-] Retiro exitoso: ${cantidad:.2f}. Saldo restante: ${self.saldo:.2f}")
            else:
                print(f"\n[!] Saldo insuficiente. Saldo actual: ${self.saldo:.2f}")

        def obtener_balance(self):
            return self.saldo

        def __str__(self):
            return f"Cuenta: {self.numero_cuenta}\nTitular: {self.titular}\nTipo: {self.tipo_cuenta}\nSaldo: ${self.saldo:.2f}"

    # --- FLUJO DE CREACIÓN E INICIO DE SESIÓN ---

    def crear_cuenta(self):
        print("\n>>> Crear Nueva Cuenta <<<")
        numero_cuenta = input("Número de cuenta: ")
        titular = input("Nombre del titular: ")
        saldo_inicial = float(input("Saldo inicial: "))
        tipo_cuenta = input("Tipo de cuenta (Ahorros/Corriente): ")
        contraseña = input("Contraseña: ")

        if not self.es_contraseña_segura(contraseña):
            print("\n[!] Contraseña no segura. Usa mayúscula, minúscula y número.")
            return

        salt = self.generar_salt()
        hash_final = self.hashear_contraseña(contraseña, salt)
        cuenta = self.Cuenta(numero_cuenta, titular, saldo_inicial, tipo_cuenta, hash_final, salt)
        self.cuentas[numero_cuenta] = cuenta
        print("\n[+] Cuenta creada exitosamente.")

    def iniciar_sesion(self, numero_cuenta, contraseña):
        if self.verificar_bloqueo(numero_cuenta):
            return None

        cuenta = self.cuentas.get(numero_cuenta)
        if cuenta:
            hash_ingresado = self.hashear_contraseña(contraseña, cuenta.salt)
            if hash_ingresado == cuenta.contraseña_hash:
                token = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
                self.sesiones_activas[numero_cuenta] = token
                print("\n[+] Inicio de sesión exitoso.")
                return token
            else:
                print("\n[!] Contraseña incorrecta.")
                self.bloquear_cuenta(numero_cuenta)
        else:
            print("\n[!] Cuenta no encontrada.")
        return None

    def verificar_sesion(self, numero_cuenta, token):
        return self.sesiones_activas.get(numero_cuenta) == token

    # --- OPERACIONES BANCARIAS ---

    def gestionar_cuenta(self, numero_cuenta, token):
        if not self.verificar_sesion(numero_cuenta, token):
            print("\n[!] Sesion inválida. Inicia sesión nuevamente.")
            return

        cuenta = self.cuentas[numero_cuenta]
        while True:
            print("\n>>> Opciones: [d]epositar | [r]etirar | [s]aldo | [salir]")
            opcion = input("Acción: ").lower()

            if opcion == 'd':
                cantidad = float(input("Cantidad a depositar: "))
                cuenta.depositar(cantidad)
            elif opcion == 'r':
                cantidad = float(input("Cantidad a retirar: "))
                cuenta.retirar(cantidad)
            elif opcion == 's':
                print(f"\n[=] Saldo actual: ${cuenta.obtener_balance():.2f}")
            elif opcion == 'salir':
                del self.sesiones_activas[numero_cuenta]
                print("\n[*] Sesión finalizada.")
                break
            else:
                print("\n[!] Opción no reconocida.")


# --- FLUJO PRINCIPAL ---
sistema = SistemaBancario()

sistema.crear_cuenta()
num = input("\nNúmero de cuenta para iniciar sesión: ")
clave = input("Contraseña: ")
token = sistema.iniciar_sesion(num, clave)
if token:
    sistema.gestionar_cuenta(num, token)

